service: notes-api

useDotenv: true

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: ${env:AWS_REGION, 'us-east-1'}
  memorySize: 128
  timeout: 5
  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: 20201221

  # environment variables made available to our functions
  environment:
    TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-notes

  # permission policy for the functions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.TABLE_NAME}"

functions:
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          authorizer: aws_iam

  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          authorizer: aws_iam

  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          authorizer: aws_iam

  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          authorizer: aws_iam

  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          authorizer: aws_iam

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
        TableName: ${self:provider.environment.TABLE_NAME}

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        Schema:
          - Name: email
            Required: true
        UsernameAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        UserPoolName: ${self:service}-${opt:stage, self:provider.stage}

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: !Sub "${self:service}-${opt:stage, self:provider.stage}-${AWS::AccountId}"
        UserPoolId: !Ref UserPool

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        AllowedOAuthFlowsUserPoolClient: false
        ClientName: ${self:service}-${opt:stage, self:provider.stage}-client
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_CUSTOM_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        GenerateSecret: false
        PreventUserExistenceErrors: ENABLED
        SupportedIdentityProviders:
          - COGNITO
        UserPoolId: !Ref UserPool

    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        AllowClassicFlow: false
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: !Ref UserPoolClient
            ProviderName: !GetAtt UserPool.ProviderName
            ServerSideTokenCheck: false
        IdentityPoolName: ${self:service}-${opt:stage, self:provider.stage}

    IdentityPoolRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Sub '${self:service}-${opt:stage, self:provider.stage}-${AWS::Region}-identity-role'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud: !Ref IdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: authenticated
        Policies:
          - PolicyName: IdentityPoolPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - mobileanalytics:PutEvents
                    - cognito-sync:*
                    - cognito-identity:*
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:*:${ApiGatewayRestApi}/*/*/*'
                  # Resource: '*'
                # - Effect: Allow
                #   Action:
                #     - s3:*
                #   Resource: !Sub 'arn:aws:s3:::${self.provider.environment.UPLOADS_BUCKET}/private/${cognito-identity.amazonaws.com:sub}/*'

    IdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref IdentityPool
        Roles:
          authenticated: !GetAtt IdentityPoolRole.Arn
