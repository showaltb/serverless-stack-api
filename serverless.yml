service: notes-api

useDotenv: true

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: ${env:AWS_REGION, 'us-east-1'}
  memorySize: 128
  timeout: 5
  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: 20201221

  # environment variables made available to our functions
  environment:
    TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-notes

  # permission policy for the functions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:table/${self:provider.environment.TABLE_NAME}"

functions:
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get

  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get

  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put

  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
